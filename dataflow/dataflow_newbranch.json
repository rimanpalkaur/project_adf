{
	"name": "dataflow_newbranch",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable23",
						"type": "DatasetReference"
					},
					"name": "salesorderheader"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable21",
						"type": "DatasetReference"
					},
					"name": "salesorderitem"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable25",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable26",
						"type": "DatasetReference"
					},
					"name": "Sqltable"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText27",
						"type": "DatasetReference"
					},
					"name": "sink2",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage1forflatfile",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SalesOrderID as integer,",
				"          RevisionNumber as integer,",
				"          OrderDate as timestamp,",
				"          DueDate as timestamp,",
				"          ShipDate as timestamp,",
				"          Status as integer,",
				"          OnlineOrderFlag as boolean,",
				"          SalesOrderNumber as string,",
				"          PurchaseOrderNumber as string,",
				"          AccountNumber as string,",
				"          CustomerID as integer,",
				"          ShipToAddressID as integer,",
				"          BillToAddressID as integer,",
				"          ShipMethod as string,",
				"          CreditCardApprovalCode as string,",
				"          SubTotal as decimal(19,4),",
				"          TaxAmt as decimal(19,4),",
				"          Freight as decimal(19,4),",
				"          TotalDue as decimal(19,4),",
				"          Comment as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> salesorderheader",
				"source(output(",
				"          SalesOrderID as integer,",
				"          SalesOrderDetailID as integer,",
				"          OrderQty as integer,",
				"          ProductID as integer,",
				"          UnitPrice as decimal(19,4),",
				"          UnitPriceDiscount as decimal(19,4),",
				"          LineTotal as decimal(38,6),",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> salesorderitem",
				"salesorderheader aggregate(groupBy(CustomerID,",
				"          OnlineOrderFlag),",
				"     TotalDue = sum(TotalDue)) ~> aggregate1",
				"salesorderheader, salesorderitem join(salesorderheader@SalesOrderID == salesorderitem@SalesOrderID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(year = year(OrderDate),",
				"          month = month(OrderDate)) ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(CustomerID,",
				"          ProductID,",
				"          year,",
				"          month),",
				"     TotalDue = sum(TotalDue)) ~> aggregate2",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"aggregate2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> Sqltable",
				"aggregate2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Row ID} as string,",
				"          {Order ID} as string,",
				"          {Order Date} as string,",
				"          {Ship Date} as string,",
				"          {Ship Mode} as string,",
				"          {Customer ID} as string,",
				"          {Customer Name} as string,",
				"          Segment as string",
				"     ),",
				"     partitionFileNames:['joinnewbranch.txt'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}